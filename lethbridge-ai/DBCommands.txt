-- Events table
CREATE TABLE events (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  location TEXT NOT NULL,
  address TEXT,
  start_date TIMESTAMPTZ NOT NULL,
  end_date TIMESTAMPTZ,
  cost DECIMAL(10,2) DEFAULT 0,
  is_free BOOLEAN DEFAULT false,
  age_min INTEGER DEFAULT 0,
  age_max INTEGER DEFAULT 99,
  category TEXT NOT NULL,
  tags TEXT[],
  image_url TEXT,
  website_url TEXT,
  organizer_id UUID REFERENCES auth.users(id),
  business_id UUID,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  is_approved BOOLEAN DEFAULT true,
  view_count INTEGER DEFAULT 0
);

-- Businesses table
CREATE TABLE businesses (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  description TEXT,
  category TEXT NOT NULL,
  address TEXT,
  phone TEXT,
  email TEXT,
  website TEXT,
  logo_url TEXT,
  owner_id UUID REFERENCES auth.users(id),
  subscription_tier TEXT DEFAULT 'free',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- User preferences
CREATE TABLE user_preferences (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id),
  preferred_categories TEXT[],
  has_children BOOLEAN DEFAULT false,
  children_ages INTEGER[],
  notification_enabled BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX idx_events_start_date ON events(start_date);
CREATE INDEX idx_events_category ON events(category);
CREATE INDEX idx_events_business ON events(business_id);

-- Enable Row Level Security
ALTER TABLE events ENABLE ROW LEVEL SECURITY;
ALTER TABLE businesses ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_preferences ENABLE ROW LEVEL SECURITY;

-- Policies for events (everyone can read, only authenticated can create)
CREATE POLICY "Public events are viewable by everyone" 
  ON events FOR SELECT 
  USING (is_approved = true);

CREATE POLICY "Users can create events" 
  ON events FOR INSERT 
  WITH CHECK (auth.uid() = organizer_id);

CREATE POLICY "Users can update own events" 
  ON events FOR UPDATE 
  USING (auth.uid() = organizer_id);

-- Add foreign key constraint for business_id in events table
ALTER TABLE events 
ADD CONSTRAINT fk_events_business 
FOREIGN KEY (business_id) 
REFERENCES businesses(id) 
ON DELETE SET NULL;

-- Add missing policies for businesses table
CREATE POLICY "Public businesses are viewable by everyone" 
  ON businesses FOR SELECT 
  USING (true);

CREATE POLICY "Users can create their own business" 
  ON businesses FOR INSERT 
  WITH CHECK (auth.uid() = owner_id);

CREATE POLICY "Users can update their own business" 
  ON businesses FOR UPDATE 
  USING (auth.uid() = owner_id);

-- Add policies for user_preferences
CREATE POLICY "Users can view own preferences" 
  ON user_preferences FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create own preferences" 
  ON user_preferences FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own preferences" 
  ON user_preferences FOR UPDATE 
  USING (auth.uid() = user_id);

-- Create a function to increment view count
CREATE OR REPLACE FUNCTION increment_view_count(event_id UUID)
RETURNS void AS $$
BEGIN
  UPDATE events 
  SET view_count = view_count + 1 
  WHERE id = event_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Add updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_events_updated_at BEFORE UPDATE ON events
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_businesses_updated_at BEFORE UPDATE ON businesses
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Insert some sample events for testing
INSERT INTO events (title, description, location, address, start_date, end_date, category, is_free, cost, age_min, age_max, tags, is_approved) VALUES
('Family Fun at Nicholas Sheran Park', 'Join us for an afternoon of family activities including face painting, games, and a BBQ!', 'Nicholas Sheran Park', '401 Laval Blvd W, Lethbridge, AB', NOW() + INTERVAL '2 days', NOW() + INTERVAL '2 days' + INTERVAL '4 hours', 'Family & Kids', true, 0, 0, 99, ARRAY['outdoor', 'family', 'free'], true),

('Lethbridge Farmers Market', 'Fresh local produce, baked goods, crafts, and more from local vendors.', 'Exhibition Park', '3401 Parkside Dr S, Lethbridge, AB', NOW() + INTERVAL '4 days', NOW() + INTERVAL '4 days' + INTERVAL '3 hours', 'Food & Dining', true, 0, 0, 99, ARRAY['market', 'local', 'food'], true),

('Live Music at The Slice', 'Local band showcase featuring three up-and-coming artists from Southern Alberta.', 'The Slice Bar and Grill', '229 5 St S, Lethbridge, AB', NOW() + INTERVAL '1 day' + INTERVAL '19 hours', NOW() + INTERVAL '1 day' + INTERVAL '23 hours', 'Music & Concerts', false, 15, 18, 99, ARRAY['music', 'nightlife', 'local'], true),

('Toddler Time at the Library', 'Stories, songs, and activities for children ages 2-4 and their caregivers.', 'Lethbridge Public Library Main Branch', '810 5 Ave S, Lethbridge, AB', NOW() + INTERVAL '3 days' + INTERVAL '10 hours', NOW() + INTERVAL '3 days' + INTERVAL '11 hours', 'Family & Kids', true, 0, 2, 4, ARRAY['educational', 'toddlers', 'library'], true),

('Business Networking Breakfast', 'Connect with local entrepreneurs and business owners over breakfast.', 'Coast Lethbridge Hotel', '526 Mayor Magrath Dr S, Lethbridge, AB', NOW() + INTERVAL '5 days' + INTERVAL '8 hours', NOW() + INTERVAL '5 days' + INTERVAL '10 hours', 'Business & Networking', false, 25, 18, 99, ARRAY['networking', 'business', 'breakfast'], true),

('Yoga in the Park', 'All-levels outdoor yoga class. Bring your own mat!', 'Henderson Lake Park', 'Henderson Lake Park, Lethbridge, AB', NOW() + INTERVAL '6 days' + INTERVAL '9 hours', NOW() + INTERVAL '6 days' + INTERVAL '10 hours 30 minutes', 'Health & Wellness', false, 10, 16, 99, ARRAY['yoga', 'fitness', 'outdoor'], true);

-- Create a view for upcoming events (helpful for queries)
CREATE OR REPLACE VIEW upcoming_events AS
SELECT * FROM events
WHERE start_date >= NOW()
AND is_approved = true
ORDER BY start_date;

-- Grant necessary permissions
GRANT USAGE ON SCHEMA public TO anon, authenticated;
GRANT ALL ON ALL TABLES IN SCHEMA public TO anon, authenticated;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO anon, authenticated;
GRANT ALL ON ALL ROUTINES IN SCHEMA public TO anon, authenticated;